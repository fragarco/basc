In computer science, Backusâ€“Naur Form (BNF) is a metasyntax used to express 
context-free grammars: that is, a formal way to describe formal languages. 
John Backus and Peter Naur developed a context free grammar to define the syntax
of a programming language by using two sets of rules: i.e., lexical rules and
syntactic rules.

BNF is widely used as a notation for the grammars of computer programming languages,
instruction sets and communication protocols, as well as a notation for representing
parts of natural language grammars. Many textbooks for programming language theory
and/or semantics document the programming language in BNF.

The above text and the examples that helped to shape the BNF grammar for the
Amstrad Locomotive BASIC are taken from:

https://rosettacode.org/wiki/BNF_Grammar

"Name"    = 'BASIC (Beginners All-purpose Symbolic Instruction Code) 64'
"Author"  = 'John G. Kemeny and Thomas E. Kurtz' 
"Version" = '1964 - Original - before Microsoft enhanced the language for the IBM PC.'
"About"   = 'BASIC is one of most common and popular teaching languages ever created. '

"Case Sensitive" = False 
"Start Symbol"   = <Lines>

{String Chars} = {Printable} - ["]
{WS}           = {Whitespace} - {CR} - {LF}

NewLine        = {CR}{LF}|{CR}
Whitespace     = {WS}+

Remark         = REM{Space}{Printable}*
ID             = {Letter}[$%]? 
String         = '"'{String Chars}*'"' 
Integer        = {digit}+ 
Real           = {digit}+.{digit}+ 

<Lines>       ::= Integer <Statements> NewLine <Lines> 
                | Integer <Statements> NewLine

<Statements>  ::= <Statement> ':' <Statements>
                | <Statement>

<Statement>   ::= CLOSE '#' Integer
                | DATA <Constant List> 
                | DIM ID '(' <Integer List> ')'
                | END          
                | FOR ID '=' <Expression> TO <Expression>     
                | FOR ID '=' <Expression> TO <Expression> STEP Integer      
                | GOTO <Expression> 
                | GOSUB <Expression> 
                | IF <Expression> THEN <Statement>         
                | INPUT <ID List>       
                | INPUT '#' Integer ',' <ID List>       
                | LET Id '=' <Expression> 
                | NEXT <ID List>               
                | OPEN <Value> FOR <Access> AS '#' Integer
                | POKE <Value List>
                | PRINT <Print list>
                | PRINT '#' Integer ',' <Print List>
                | READ <ID List>           
                | RETURN
                | RESTORE
                | RUN
                | STOP
                | SYS <Value>
                | WAIT <Value List>
                | Remark

<Access>   ::= INPUT
             | OUPUT
                   
<ID List>  ::= ID ',' <ID List> 
             | ID 

<Value List>      ::= <Value> ',' <Value List> 
                    | <Value> 

<Constant List>   ::= <Constant> ',' <Constant List> 
                    | <Constant> 

<Integer List>    ::= Integer ',' <Integer List>
                    | Integer
                 
<Expression List> ::= <Expression> ',' <Expression List> 
                    | <Expression> 

<Print List>      ::= <Expression> ';' <Print List>
                    | <Expression> 
                    |  

<Expression>  ::= <And Exp> OR <Expression> 
                | <And Exp> 

<And Exp>     ::= <Not Exp> AND <And Exp> 
                | <Not Exp> 
 
<Not Exp>     ::= NOT <Compare Exp> 
                | <Compare Exp> 

<Compare Exp> ::= <Add Exp> '='  <Compare Exp> 
                | <Add Exp> '<>' <Compare Exp> 
                | <Add Exp> '><' <Compare Exp> 
                | <Add Exp> '>'  <Compare Exp> 
                | <Add Exp> '>=' <Compare Exp> 
                | <Add Exp> '<'  <Compare Exp> 
                | <Add Exp> '<=' <Compare Exp> 
                | <Add Exp> 

<Add Exp>     ::= <Mult Exp> '+' <Add Exp> 
                | <Mult Exp> '-' <Add Exp> 
                | <Mult Exp> 

<Mult Exp>    ::= <Negate Exp> '*' <Mult Exp> 
                | <Negate Exp> '/' <Mult Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Power Exp> 
                | <Power Exp> 

<Power Exp>   ::= <Power Exp> '^' <Value> 
                | <Value> 

<Value>       ::= '(' <Expression> ')'
                | ID 
                | ID '(' <Expression List> ')'
                | <Constant> 

<Constant> ::= Integer 
             | String 
             | Real 


"Name"    = 'Commodore PET BASIC'
"Author"  = 'Commodore Business Machines'
"Version" = '2.0'
"About"   = 'This is the version of BASIC that was used on the Commodore 64.'

"Case Sensitive" = False 
program ::= <Lines>

{String Chars} = {Printable} - ["]
{WS}           = {Whitespace} - {CR} - {LF}

NewLine        = {CR}{LF}|{CR}
Whitespace     = {WS}+

Remark         = REM{Space}{Printable}*
ID             = {Letter}{Alphanumeric}?[$%!]?
FunctionID     = FN {Letter}{Letter}?

<program>     ::= <Lines>

<Lines>       ::= <Lines> <Line>
                | <Line>

<Line>        ::= Integer <Statements> NewLine 
                                
<Statements>  ::= <Statements> ':' <Statement>
                | <Statement>

<Statement>   ::= CLOSE Integer
                | CLR
                | CMD  <Expression>
                | CONT                                          !Continue
                | DATA <Constant List> 
                | DEF FunctionID '(' <ID List> ')' '=' <Expression>    !The ID must start with FN
                | DIM ID '(' <Expression List> ')'
                | END          
                | FOR ID '=' <Expression> TO <Expression> <Step Opt>     
                | GET ID
                | GET '#' Integer ',' ID
                | GOSUB <Expression> 
                | GOTO <Expression>                 
                | IF <Expression> THEN <Then Clause>                
                | INPUT <ID List>       
                | INPUT '#' Integer ',' <ID List>       
                | LET ID '=' <Expression> 
                | LIST <Line Range>
                | LOAD <Value List>        
                | ID '=' <Expression> 
                | NEW
                | NEXT <ID List>               
                | ON ID GOTO <Expression List>
                | OPEN <Expression List>         
                | POKE <Expression> ',' <Expression>
                | PRINT <Print list>
                | PRINT '#' Integer ',' <Print List>
                | READ <ID List>           
                | RETURN
                | RESTORE
                | RUN
                | RUN <Expression>
                | STOP
                | SYS <Expression>
                | WAIT <Expression List>     
                | VERIFY <Expression List>     
                | Remark

<Step Opt> ::= STEP <Expression>
             | 
                   
<ID List>  ::= ID ',' <ID List> 
             | ID 

<Value List>      ::= <Value> ',' <Value List> 
                    | <Value> 

<Constant List>   ::= <Constant> ',' <Constant List> 
                    | <Constant> 
                 
<Expression List> ::= <Expression> ',' <Expression List> 
                    | <Expression> 

<Print List>      ::= <Expression> ';' <Print List>
                    | <Expression> 
                    |  

<Line Range>  ::= Integer 
                | Integer '-'
                | Integer '-' Integer 

<Then Clause> ::= Integer
                | <Statement>

! ----------------------------------------------- Expressions

<Expression>  ::= <And Exp> OR <Expression> 
                | <And Exp> 

<And Exp>     ::= <Not Exp> AND <And Exp> 
                | <Not Exp> 
 
<Not Exp>     ::= NOT <Compare Exp> 
                | <Compare Exp> 

<Compare Exp> ::= <Add Exp> '='  <Compare Exp> 
                | <Add Exp> '<>' <Compare Exp> 
                | <Add Exp> '>'  <Compare Exp> 
                | <Add Exp> '>=' <Compare Exp> 
                | <Add Exp> '<'  <Compare Exp> 
                | <Add Exp> '<=' <Compare Exp> 
                | <Add Exp> 

<Add Exp>     ::= <Mult Exp> '+' <Add Exp> 
                | <Mult Exp> '-' <Add Exp> 
                | <Mult Exp> 

<Mult Exp>    ::= <Negate Exp> '*' <Mult Exp> 
                | <Negate Exp> '/' <Mult Exp> 
                | <Negate Exp> 

<Negate Exp>  ::= '-' <Power Exp> 
                | <Power Exp> 

<Power Exp>   ::= <Power Exp> '^' <Sub Exp>        !On the Commodore, the symbol was an up-arrow
                | <Sub Exp> 

<Sub Exp>     ::= '(' <Expression> ')'
                | <Value>

<Value>       ::= ID 
                | ABS        '(' <Expression> ')'
                | ASC        '(' <Expression> ')'
                | ATN        '(' <Expression> ')'
                | 'CHR$'     '(' <Expression> ')'
                | COS        '(' <Expression> ')'
                | EXP        '(' <Expression> ')'
                | FunctionID '(' <Expression List> ')'
                | FRE        '(' <Value> ')'                  !The <Value> is  irrelevant
                | INT        '(' <Expression> ')'
                | 'LEFT$'    '(' <Expression> ',' <Expression> ')'
                | LEN        '(' <Expression> ')'
                | PEEK       '(' <Expression> ')'
                | POS        '(' <Value> ')'                  !The <Value> is  irrelevant
                | 'RIGHT$'   '(' <Expression> ',' <Expression> ')'
                | RND        '(' <Expression> ')'
                | SGN        '(' <Expression> ')' 
                | SPC        '(' <Expression> ')' 
                | SQR        '(' <Expression> ')' 
                | TAB        '(' <Expression> ')' 
                | TAN        '(' <Expression> ')' 
                | VAL        '(' <Expression> ')' 
                
                | <Constant> 

<Constant>    ::= Integer 
                | String 
                | Real 

String         = '"'{String Chars}*'"' 
Integer        = {Digit}+ 
Real           = {Digit}+'.'{Digit}+ 





LOCOMOTIVE BASIC

<lines>       ::= EOF | NEWLINE <lines> | <line> <lines>
<line>        ::= INTEGER <statements> NEWLINE                 
<statements>  ::= <statement> [':' <statements>]
<statement>   ::= ID ':' NEWLINE | ID '=' <expression> | <keyword>

<keyword>     ::= RESERVED_WORD [{(arg_stream | arg_int | arg_real | arg_str)}]
<expression>  ::= <or_exp> [XOR <expression>]
<or_exp>      ::= <and_exp> [OR <or_exp>]
<and_exp>     ::= <not_exp> [AND <and_exp>]
<not_exp>     ::= [NOT] <compare_exp>
<compare_exp> ::= <add_exp> '='  <compare_exp> 
                | <add_exp> '<>' <compare_exp> 
                | <add_exp> '>'  <compare_exp> 
                | <add_exp> '>=' <compare_exp> 
                | <add_exp> '<'  <compare_exp> 
                | <add_exp> '<=' <compare_exp> 
                | <add_exp> 

<add_exp>     ::= <mod_exp> '+' <add_exp> 
                | <mod_exp> '-' <add_exp> 
                | <mod_exp> 

<mod_exp>     ::= <mult_exp> [MOD <mod_exp>]

<mult_exp>    ::= <negate_exp> '*' <mult_exp> 
                | <negate_exp> '/' <mult_exp> 
                | <negate_exp> 

<negate_exp>  ::= '-' <power_exp> | <power_exp> 
<power_exp>   ::= <power_exp> '^' <sub_exp> | <sub_exp> 
<sub_exp>     ::= '(' <expression> ')' | <value>
<value>       ::= ID | INTEGER | STRING | REAL | <function>

<keyword>     ::= ???
<function>    ::= ???

BASIC notation

<XXX>       XXX must be typed
()          () must be typed
[]          Optional
& or &H     Prefixes for a hexadecimal number
&X          Prefixes for a binary number
#           Prefixes for an input/output stream

DATA TYPES

<alphanumeric chain>    Contain from 0 to 255 characters. '+' concatenates (max 255).
<whole number>          Vary from -32768 to + 32767.
<real number>           From -1.7E+38 to +1.7E+38
<numerical expression>  Is an expression which leads to a numerical value.All that is not
                        <alphanumeric chain>. Can be REAL numbers.

<stream number>         <numerical expression> to indicate a screen window, a printer, a
                        cassette or a diskette to which the text must be forwarded.

<list of element>       Describes a list of elements separated by commas.
                        Limited by the line lengh.

Various indicators of data type:
%   Whole (Integer)
!   Reals (by defect)
$   Alphanumeric chain (String)

KEYWORDS AND RESERVED SYMBOLS CAN BE:
* COMMANDS    : operations executed direcly
* FUNCTIONS   : operations intervening in an expression
* OPERATORS   : act with mathematical arguments

KEYWORDS

ABS(<numerical expression>) -- FUNCTION
AFTER <chronometer time>[,<chronometer number>] GOSUB <line number> -- COMMAND
<argument> AND <argument> -- OPERATOR
ASC(<alphanumeric chain>) -- FUNCTION
ATN(<numerical expression>) -- FUNCTION
AUTO [<line number>][,<increment>] -- COMMAND
BIN$ (<whole number without sign>[,<whole number>]) -- FUNCTION
BORDER <color number>[,<color number>] -- COMMAND
CALL <adress>[,<list of:<parameter>] -- COMMAND
CAT -- COMMAND
CHAIN <filename>[,<line number>] -- COMMAND
CHAIN MERGE <filename>[,<line number>][,DELETE <unit of lines>] -- COMMAND
CHR$(<whole number>) -- FUNCTION
CINT(<numerical expression>) -- FUNCTION
CLEAR -- COMMAND
CLEAR INPUT -- COMMAND
CLG [<inks>] -- COMMAND
CLOSEIN -- COMMAND
CLOSEOUT -- COMMAND
CLS [# <stream number>] -- COMMAND
CONT -- COMMAND
COPYCHR$ (# <stream number>) -- FUNCTION
COS (<numerical expression>) -- FUNCTION
CREAL  (<numerical expression>) -- FUNCTION
CURSOR [<system indicator>)][ , <user indicator>] --  COMMAND
DATA <list of:<constant> -- COMMAND
DEC$ (<numerical expression>,<form model>) -- FUNCTION
DEF FN <name>[(<parameters>)]=<expression> -- COMMAND
DEFINT <list of: <letters concerned> -- COMMAND
DEFREAL <list of: <letters concerned> -- COMMAND
DEFSTR <list of: <letters concerned> -- COMMAND
DEG -- COMMAND
DELETE <unit of lines> -- COMMAND
DERR -- FUNCTION
DI -- COMMAND
DIM <list of: <subscripted variable> -- COMMAND
DRAW <coordinate x>,<coordinate y> [,[<ink>][,<ink mode>]] -- COMMAND
DRAWR <interval x>,<interval y> [,[<ink>][,<ink mode>]] -- COMMAND
EDIT <line number> -- COMMAND
EI -- COMMAND
END -- COMMAND
ENT <envelope number> [,<envelope section>] [,<envelope section>]
                      [,<envelope section>] [,<envelope section>] [,<envelope section>]
                      -- COMMAND
ENV <envelope number> [,<envelope section>] [,<envelope section>]
                      [,<envelope section>] [,<envelope section>] [,<envelope section>]
                      -- COMMAND
EOF -- FUNCTION
ERASE <list of:<variable name> -- COMMAND
ERL -- FUNCTION
ERR -- FUNCTION
ERROR <whole number> -- COMMAND
EVERY <chronometer period>[,<chronometer number>] GOSUB <line number> -- COMMAND
EXP (<numerical expression>) -- FUNCTION
FILL <ink> -- COMMAND
FIX  (<numerical expression>) -- FUNCTION
FOR <simple variable>=<beginning> TO <end> [STEP <increment>] -- COMMAND
FRAME -- COMMAND
FRE (<numerical expression>) | FRE (<alphanumeric chain>) -- FUNCTION
GOSUB <line number> -- COMMAND
GOTO <line number> -- COMMAND
GRAPHICS PAPER <ink> -- COMMAND
GRAPHICS PEN [<ink>][,<paper mode>] -- COMMAND
HEX$ (<whole number without sign>[,<zone with>]) -- FUNCTION
HIMEM -- FUNCTION
IF (<logical expression>) THEN <option> [ELSE <option>] -- COMMAND
INK <ink>,<color number> [,<color number>] -- COMMAND
INKEY (<whole number>) -- FUNCTION
INKEY$ -- FUNCTION
INP(<port number>) -- FUNCTION
INPUT [#<stream number>,][;][<chain> <separator>] -- COMMAND
INSTR ( [<starting position>,]<chain containing>,<chain contained> ) -- FUNCTION
INT (<numerical expression>) -- FUNCTION
JOY (<whole number>) -- FUNCTION
KEY <logical key number>,<alphanumeric chain> -- COMMAND
KEY DEF <key number>,<repetition>[,<normal>[,<with shift>[,with control]]] -- COMMAND
LEFT$(<alphanumeric chain>,<necessary length>) -- FUNCTION
LEN (<alphanumeric chain>) -- FUNCTION
LET <variable>=<expression> -- COMMAND
LINE INPUT [#<stream number>,][;][<chain> <separator>] <variable alphanumeric> -- COMMAND
LIST [<unit of lines>][, #<stream number>] -- COMMAND
LOAD <filename>[,<adress>] -- COMMAND
LOCATE [#<stream number>,]<coordinate x>,<coordinate y> -- COMMAND
LOG (<numerical expression>) -- FUNCTION
LOG10 (<numerical expression>) -- FUNCTION
LOWER$ (<alphanumeric chain>) -- FUNCTION
MASK [<whole number>][,<layout of the first point>] -- COMMAND
MAX (<list of:<numerical expression>) -- FUNCTION
MEMORY <adress> -- COMMAND
MERGE <filename> -- COMMAND
MID$ (<alphanumeric chain>,<starting position>[,<length of under chain>]) -- FUNCTION
MID$ (<chain variable>,<insertion position>[,<lenght of the new chain>])
     = <new alphanumeric chain>
    -- COMMAND
MIN (<list of:<numerical expression>) -- FUNCTION
<argument 1> MOD <argument 2> -- OPERATOR
MODE <whole number> -- COMMAND
MOVE <coordinate x>,<coordinate y>[,[<ink>][,<ink mode>]] -- COMMAND
MOVER <interval x>,<interval y>[,[<ink>][,<ink mode>]] -- COMMAND
NEW -- COMMAND
NEXT [<list of: <variable>] -- COMMAND
NOT <argument> -- OPERATOR
ON BREAK CONT -- COMMAND
ON BREAK GOSUB <line number> -- COMMAND
ON BREAK STOP -- COMMAND
ON ERROR GOTO <line number> -- COMMAND
ON <selector> GOSUB <list of: <line number> -- COMMAND
ON <selector> GOTO <list of: <line number> --  COMMAND
ON SQ (<stream number>) GOSUB <line number> -- COMMAND
OPENIN <filename> -- COMMAND
OPENOUT <filename> -- COMMAND
<argument> OR <argument> -- OPERATOR
ORIGIN <x>,<y>[,<left>,<right>,<top>,<bottom>] -- COMMAND
OUT <port number>,<whole number> -- COMMAND
PAPER[#<stream number>,]<ink> -- COMMAND
PEEK (<adress>) -- FUNCTION
PEN [#<stream number>,][<ink>][,<paper mode>] -- COMMAND
PI -- FUNCTION
PLOT <coordinate x>,<coordinate y>[,[<ink>][,<ink mode>]] -- COMMAND
PLOTR <interval x>,<interval y>[,[<ink>][,<ink mode>]] -- COMMAND
POKE <adress>,<whole number> -- COMMAND
POS (#<stream number>) -- FUNCTION
PRINT [#<stream number>,][<list of: <article to print>] -- COMMAND
    PRINT SPC
    PRINT TAB
PRINT [#<stream number>,][<list of: <article to print>][;]
            [SPC(<whole number>)][<list of: <article to print>]
PRINT [#<stream number>,][<list of: <article to print>][;]
            [TAB(<whole number>)][<list of: <article to print>]

PRINT [#<stream number>][<list of:<article to print>][;]
            [USING<format model>][<separator> <expression>]
RAD -- COMMAND
RANDOMIZE [<numerical expression>] -- COMMAND
READ <list of:<variable> -- COMMAND
RELEASE <sound channels> -- COMMAND
REM <text> -- COMMAND
REMAIN (<chronometer number>) -- COMMAND
RENUM [<new line number>][,[<old line number>][,<increment>]] -- COMMAND
RESTORE [<line number>] -- COMMAND
RESUME [<line number>] -- COMMAND
RESUME NEXT -- COMMAND
RETURN -- COMMAND
RIGHT$ (<alphanumeric chain>,<required length>) -- FUNCTION
RND [ (<numerical expression>)] -- FUNCTION
ROUND (<numerical expression>[,<number of decimals>]) -- FUNCTION
RUN <alphanumeric chain> -- COMMAND
RUN [ <line number>] -- COMMAND
SAVE <filename>[,<type of file>][,<binary parameters>] -- COMMAND
SGN(<numerical expression>) -- FUNCTION
SIN(<numerical expression>) -- FUNCTION
SOUND <channel state>,<sound period>[,<duration>[,<volume>[,<volume envelope>,
            [<tonality envelope>[,<noise period>]]]]] -- COMMAND
SPACE$ (<whole number>) -- FUNCTION
SPEED INK <period 1>,<period 2> -- COMMAND
SPEED KEY <initial delay>,<inter-repetitions interval> -- COMMAND
SPEED WRITE <whole number> -- COMMAND
SQ (<channel number>) -- FUNCTION
SQR (<numerical expression>) -- FUNCTION
STOP -- COMMAND
STR$ (<numerical expression>) -- FUNCTION
STRING$ (<lenght>,<character>) -- FUNCTION
SYMBOL <character number>,<list of:<line> -- COMMAND
SYMBOL AFTER <whole number> -- COMMAND
TAG [#(<stream number>)] -- COMMAND
TAGOFF [#(<stream number>)] -- COMMAND
TAN (<numerical expression>) -- FUNCTION
TEST (<coordinate x>,<coordinate y>) -- FUNCTION
TESTR (<interval x>,<interval y>) -- FUNCTION
TIME -- FUNCTION
TROFF -- COMMAND
TRON -- COMMAND
UNT (<adress>) -- COMMAND
UPPER$ (<alphanumeric chain>) -- FUNCTION
VAL (<character string>) -- FUNCTION
VPOS ( # <stream number>) -- FUNCTION
WAIT <I/O port number>,<mask>[,<inversion>] -- COMMAND
WEND -- COMMAND
WHILE <logical expression> -- COMMAND
WIDTH <whole number> -- COMMAND
WINDOW [ # <stream number>,]<left>,<right>,<high>,<low> -- COMMAND
WINDOW SWAP <stream number>,<stream number> -- COMMAND
WRITE [ # <stream number>,][<data to write>] -- COMMAND
<argument> XOR <argument> -- OPERATOR
XPOS -- FUNCTION
YPOS -- FUNCTION
ZONE <whole number> -- COMMAND
